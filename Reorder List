/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    void divide(ListNode* head,ListNode* &head1,ListNode* &head2,ListNode* &mid){
        ListNode* slow = head, *fast = head, *prev_slow = NULL;
        while(fast && fast->next){
            prev_slow = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev_slow->next = NULL;
        if(!fast) head2 = slow;
        else{
            head2 = slow->next;
            mid = slow;
            mid->next = NULL;
        }
        head1 = head;
    }
    ListNode* reverse(ListNode* head){
        ListNode* curr = head, *prev = NULL, *next = NULL;
        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
public:
    void reorderList(ListNode* head) {
        if(!head || !head->next) return;
        ListNode* head1 = NULL, *head2 = NULL, *mid = NULL;
        divide(head,head1,head2,mid);
        head2 = reverse(head2);
        
        ListNode* dummy = new ListNode(-1);
        ListNode* res = dummy;
        while(head1 && head2){
            res->next = head1;
            res = head1;
            head1 = head1->next;
            res->next = head2;
            res = head2;
            head2 = head2->next;
        }
        res->next = mid;
        head = dummy->next;
    }
};

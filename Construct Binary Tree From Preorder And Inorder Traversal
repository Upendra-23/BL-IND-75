/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* buildtree(int prestart,int preend,vector<int> &preorder,int instart,int inend,vector<int> &inorder, unordered_map<int,int> &mp){
        if(prestart > preend || instart > inend) return NULL;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int inroot = mp[root->val];
        int numsleft = inroot-instart;
        root->left = buildtree(prestart+1,prestart+numsleft,preorder,instart,inroot-1,inorder,mp);
        root->right = buildtree(prestart+numsleft+1,preend,preorder,inroot+1,inend,inorder,mp);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++)
            mp[inorder[i]] = i;
        int n = inorder.size();
        return buildtree(0,n-1,preorder,0,n-1,inorder,mp);
    }
};

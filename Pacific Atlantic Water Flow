class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
    void dfs(int row,int col,vector<vector<int>> &heights,vector<vector<int>> &vis){
        vis[row][col] = true;
        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};
        for(int i=0;i<4;i++){
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            if(isvalid(nrow,ncol,heights.size(),heights[0].size()) && !vis[nrow][ncol] &&
            heights[row][col] <= heights[nrow][ncol])
                dfs(nrow,ncol,heights,vis);
        }
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        vector<vector<int>> vispacific(n,vector<int> (m,0));
        vector<vector<int>> visatlantic(n,vector<int> (m,0));
        for(int j=0;j<m;j++){
            if(!vispacific[0][j]) dfs(0,j,heights,vispacific);
            if(!visatlantic[n-1][j]) dfs(n-1,j,heights,visatlantic);
        }
        for(int i=0;i<n;i++){
            if(!vispacific[i][0]) dfs(i,0,heights,vispacific);
            if(!visatlantic[i][m-1]) dfs(i,m-1,heights,visatlantic);
        }
        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vispacific[i][j] && visatlantic[i][j])
                    ans.push_back({i,j});
            }
        }
        return ans;
    }
};

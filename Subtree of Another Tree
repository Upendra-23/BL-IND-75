/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool isSame(TreeNode* root1,TreeNode* root2){
        if(!root1 || !root2) return root1 == root2;
        return root1->val == root2->val && isSame(root1->left,root2->left) && isSame(root1->right,root2->right);
    }
    bool fun(TreeNode* root,TreeNode* subRoot) {
        if(!root) return false;
        if(isSame(root,subRoot)) return true;
        return fun(root->left,subRoot) || fun(root->right,subRoot);
    }
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(!root || !subRoot) return root == subRoot;
        return fun(root,subRoot);
    }
};
